name: Rebuild slurm with nvml autodetect support

on:
  push:
    # The tag must match the Ubuntu version of the slurm package.
    tags:
      - "*.*.*-*"

defaults:
  run:
    shell: /usr/bin/bash -eo pipefail {0}

env:
  DEBIAN_FRONTEND: noninteractive

jobs:
  build-debs-and-release:
    strategy:
      matrix:
        runner_version: ["22.04", "24.04"]
    runs-on: ubuntu-${{ matrix.runner_version }}
    permissions:
      contents: write
    steps:
      - name: Prepare the environment
        run: |
          SLURM_VERSION="${{ github.ref_name }}"
          echo "SLURM_VERSION=${SLURM_VERSION}" >> "${GITHUB_ENV}"

          # Pick the correct source package based on the version being built.
          SLURM_SRC_PKG="slurm-wlm"
          case "${SLURM_VERSION}" in
            21.08.* )
              DEB_SOURCE_REPO="jammy universe"
              ;;
            23.10.* )
              DEB_SOURCE_REPO="mantic universe"
              ;;
            24.04.* )
              DEB_SOURCE_REPO="noble universe"
              ;;
            24.10.* )
              DEB_SOURCE_REPO="oracular universe"
              ;;
            * )
              1>&2 echo "No deb source repo for Slurm version ${SLURM_VERSION}"
              false
              ;;
          esac
          echo "SLURM_SRC_PKG=${SLURM_SRC_PKG}" >> "${GITHUB_ENV}"
          echo "DEB_SOURCE_REPO=${DEB_SOURCE_REPO}" >> "${GITHUB_ENV}"

          BUILDDIR="${SLURM_SRC_PKG}-${SLURM_VERSION}-ubuntu${{ matrix.runner_version }}-debs"
          echo "BUILDDIR=${BUILDDIR}" >> "${GITHUB_ENV}"

      - name: Enable the source repository
        run: |
          echo "deb-src http://archive.ubuntu.com/ubuntu/ ${DEB_SOURCE_REPO}" |
            sudo tee -a /etc/apt/sources.list.d/debsrc.list
          # Use old-releases.ubuntu.com for non-LTS EOL versions.
          for f in /etc/apt/sources.list /etc/apt/sources.list.d/*; do
            sed -Ei \
              '/ubuntu\.com\/ubuntu\/ (kinetic|lunar|mantic)/ {
                s|http://[^.]*|http://old-releases|
              }' \
              -- "${f}"
          done
          sudo apt-get update

      - name: Install the Ubuntu build tools
        run: |
          sudo apt-get -y install --no-install-recommends \
            devscripts equivs

      - name: Install the NVIDIA build dependencies
        run: |
          sudo apt-get -y install libnvidia-ml-dev

      - name: Prepare the build directory
        run: mkdir "${BUILDDIR}"

      - name: Download the build sources
        working-directory: ${{ env.BUILDDIR }}
        run: |
          sudo apt-get source --only-source "${SLURM_SRC_PKG}=${SLURM_VERSION}"

      - name: Install the build dependencies
        working-directory: ${{ env.BUILDDIR }}
        run: |
          cd "${SLURM_SRC_PKG}-"*
          mk-build-deps \
            -t 'apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends -y' \
            -i debian/control

      - name: Build the package
        working-directory: ${{ env.BUILDDIR }}
        run: |
          cd "${SLURM_SRC_PKG}-"*
          debuild -us -uc -b

      - name: Verify that the nvml library was built
        working-directory: ${{ env.BUILDDIR }}
        run: dpkg-deb -c slurm-wlm-basic-plugins_*_amd64.deb | grep gpu_nvml.so > /dev/null

      - name: Create the release archive
        run: |
          tar --verbose --create --auto-compress \
            --file "${BUILDDIR}.tar.gz" \
            "${BUILDDIR}"/*.deb \
            "${BUILDDIR}"/*.buildinfo \
            "${BUILDDIR}"/*.changes \
            "${BUILDDIR}"/*.build

      - name: Create the release
        uses: softprops/action-gh-release@v1
        with:
          body: |
            # Slurm ${{ env.SLURM_VERSION }} with gpu/nvml
          files: ${{ env.BUILDDIR }}.tar.gz
          fail_on_unmatched_files: true
